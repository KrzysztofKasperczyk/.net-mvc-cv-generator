@model CvGenerator.Models.CurriculumVitae
@using Microsoft.AspNetCore.Mvc.ViewFeatures

@{
    ViewData["Title"] = "Create CV";

    // Prepare ViewData for the entry partials
    var vdEntry = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntrySkill" } };
    var vdEntryWork = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntryWork" } };
    var vdEntryEducation = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntryEducation" } };
    var vdEntryLang = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntryLanguage" } };
    var vdEntryCustom = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "Custom" } };
}

<h1>Create Your CV</h1>

<form asp-action="Create" method="post" enctype="multipart/form-data">
  <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

  <!-- Personal Information -->
  <div class="card mb-4 personal-item">
    <div class="card-header">Personal Information</div>
    <div class="card-body">
      <div class="row">
        <!-- Left Column -->
        <div class="col-12 col-md-6">
          <div class="form-group">
            <label asp-for="Personal.FullName"></label>
            <input asp-for="Personal.FullName" class="form-control w-50" maxlength="100" />
            <span asp-validation-for="Personal.FullName" class="text-danger"></span>
          </div>
          <div class="form-group">
            <label asp-for="Personal.Email"></label>
            <input asp-for="Personal.Email" class="form-control w-50" maxlength="100" />
            <span asp-validation-for="Personal.Email" class="text-danger"></span>
          </div>
          <div class="form-group">
            <label asp-for="Personal.CountryCode"></label>
            <select asp-for="Personal.CountryCode" class="form-control w-auto" asp-items="ViewBag.CountryCodes"></select>
            <span asp-validation-for="Personal.CountryCode" class="text-danger"></span>
          </div>
          <div class="form-group">
            <label asp-for="Personal.PhoneNumber"></label>
            <input asp-for="Personal.PhoneNumber" id="Personal_PhoneNumber" class="form-control w-auto" maxlength="11" />
            <span asp-validation-for="Personal.PhoneNumber" class="text-danger"></span>
          </div>
        </div>
        <!-- Right Column -->
        <div class="col-12 col-md-6">
          <div class="form-group">
            <label for="Photo" class="d-block">Photo</label>
            <input type="file" name="Photo" id="Photo" accept="image/*" class="form-control-file mt-1" />
          </div>
          <img id="photo-preview" src="" alt="Photo preview" class="cv-photo mt-2" style="display:none;" />
        </div>
      </div>
      <div class="form-group">
        <label asp-for="Personal.Summary"></label>
        <textarea asp-for="Personal.Summary" class="form-control" maxlength="500" rows="4"
                  placeholder="Tell us something about yourself…"></textarea>
        <span asp-validation-for="Personal.Summary" class="text-danger"></span>
      </div>
    </div>
  </div>

  <!-- Add Section Dropdown -->
  <div class="mb-4">
    <div class="dropdown">
      <button class="btn btn-outline-primary dropdown-toggle"
              type="button"
              id="addSectionBtn"
              data-bs-toggle="dropdown"
              aria-expanded="false">
        Add Section
      </button>
      <ul class="dropdown-menu" aria-labelledby="addSectionBtn">
        <li><a class="dropdown-item" href="#" data-section="education">Education</a></li>
        <li><a class="dropdown-item" href="#" data-section="work">Work Experience</a></li>
        <li><a class="dropdown-item" href="#" data-section="skills">Skills</a></li>
        <li><a class="dropdown-item" href="#" data-section="languages">Languages</a></li>
        <li><a class="dropdown-item" href="#" data-section="custom">Custom</a></li>
      </ul>
    </div>
  </div>

  <!-- Education Section -->
  <div id="section-education" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Education</div>
      <div class="card-body">
        <div id="added-education-container" class="d-flex flex-column"></div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">New Education</div>
      <div class="card-body">
        <partial name="_EducationItem"
                 model="new CvGenerator.Models.EducationItem()"
                 view-data="vdEntryEducation" />
      </div>
    </div>

    <div id="education-inputs"></div>
  </div>

  <!-- Work Experience Section -->
  <div id="section-work" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Experience</div>
      <div class="card-body">
        <div id="added-work-container" class="d-flex flex-column"></div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">New Experience</div>
      <div class="card-body">
        <partial name="_WorkItem"
                 model="new CvGenerator.Models.WorkExperience()"
                 view-data="vdEntryWork" />
      </div>
    </div>

    <div id="work-inputs"></div>
  </div>

  <!-- Skills Section -->
  <div id="section-skills" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Skills</div>
      <div class="card-body">
        <div id="added-skills-container" class="d-flex flex-wrap"></div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">New Skill</div>
      <div class="card-body">
        <partial name="_SkillItem"
                 model="new CvGenerator.Models.Skill()"
                 view-data="vdEntry" />
      </div>
    </div>

    <div id="skills-inputs"></div>
  </div>

  <!-- Languages Section -->
  <div id="section-languages" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Languages</div>
      <div class="card-body">
        <div id="added-languages-container" class="d-flex flex-wrap"></div>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">New Language</div>
      <div class="card-body">
        <partial name="_LanguageItem"
                 model="new CvGenerator.Models.LanguageItem()"
                 view-data="vdEntryLang" />
        <button type="button" id="add-language" class="btn btn-sm btn-outline-primary mt-2">
          Add Language
        </button>
      </div>
    </div>

    <div id="languages-inputs"></div>
    <span asp-validation-for="Languages" class="text-danger"></span>
  </div>

  <!-- Custom Section -->
  <div id="section-custom" class="d-none">
    <partial name="_CustomSection"
             model="new CvGenerator.Models.CustomSection()"
             view-data="vdEntryCustom" />
  </div>

  <!-- Submit Button -->
  <div class="row mb-4">
    <div class="col-12 col-md-6">
      <button type="submit" class="btn btn-primary">Preview CV</button>
    </div>
  </div>
</form>

<!-- Hidden template for Skill clones -->
<div id="skill-template" style="display:none;">
  <partial
    name="_SkillItem"
    model="new CvGenerator.Models.Skill()"
    view-data="@(new ViewDataDictionary(ViewData) {
      TemplateInfo = { HtmlFieldPrefix = "Skills[__index__]" }
    })" />
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
        <script>
        $(function() {
            // ── Helper: format YYYY-MM to MM-YYYY ───────────────────────────────
            function formatYM(dateString) {
                const parts = dateString.split('-');
                return parts[1] + '-' + parts[0];
            }

            // ── Counters for dynamic lists ───────────────────────────────────────
            var educationIndex = 0,
                workIndex      = 0,
                skillIndex     = 0,
                langIndex      = @Model.Languages.Count;

            // ── Personal Information ────────────────────────────────────────────
            $('#Personal_PhoneNumber').on('input', function() {
                const val   = this.value.replace(/\D/g, '').substring(0,9),
                      parts = val.match(/.{1,3}/g) || [];
                this.value = parts.join('-');
            });
            $('#Photo').on('change', function(evt) {
                const file = evt.target.files[0];
                if (!file || !file.type.startsWith('image/')) {
                    alert('Please select an image file.');
                    return;
                }
                const reader = new FileReader();
                reader.onload = e => $('#photo-preview').attr('src', e.target.result).show();
                reader.readAsDataURL(file);
            });

            // ── Autocomplete ────────────────────────────────────────────────────
            $('#institution-autocomplete').autocomplete({
                source: '@Url.Action("SearchInstitutions", "Cv")',
                minLength: 2, delay: 200
            });
            $('#degree-autocomplete').autocomplete({
                source: '@Url.Action("SearchDegrees", "Cv")',
                minLength: 2, delay: 200
            });
            $('#EntryLanguage_Name').autocomplete({
                source: '@Url.Action("SearchLanguages", "Cv")',
                minLength: 1, delay: 200
            });

            // ── Date Restrictions ───────────────────────────────────────────────
            const today = new Date().toISOString().split('T')[0];
            $('input[type="date"][id$="StartDate"]')
                .attr('max', today)
                .on('change', function(){ if (this.value > today) this.value = today; });
            $('input[type="date"]').on('change', function(){
                const name = $(this).attr('name');
                if (name.endsWith('.StartDate')) {
                    const endName = name.replace('.StartDate','.EndDate'),
                          $end    = $('input[name="'+endName+'"]');
                    $end.attr('min', this.value);
                    if ($end.val() && $end.val() < this.value) $end.val(this.value);
                }
                if (name.endsWith('.EndDate')) {
                    const startName = name.replace('.EndDate','.StartDate'),
                          startVal  = $('input[name="'+startName+'"]').val();
                    if (startVal && this.value < startVal) this.value = startVal;
                }
            });

            // ── EDUCATION ───────────────────────────────────────────────────────
            $('#add-education').on('click', function() {
                const inst  = $('[name="EntryEducation.Institution"]').val(),
                      deg   = $('[name="EntryEducation.Degree"]').val(),
                      start = $('[name="EntryEducation.StartDate"]').val(),
                      end   = $('[name="EntryEducation.EndDate"]').val(),
                      ong   = $('[name="EntryEducation.IsOngoing"]').is(':checked'),
                      desc  = $('[name="EntryEducation.Description"]').val();

                if (!inst || !deg) { alert('Please enter both Institution and Degree.'); return; }

                let dates = start ? formatYM(start) : '';
                if (ong)       dates += ' – Present';
                else if (end)  dates += ' – ' + formatYM(end);

                const tileHtml =
                    `<div class="education-tile mb-2 p-2 border rounded" data-index="${educationIndex}">
                        <strong>${inst}</strong> ${deg}<br>
                        <small>${dates}</small>` +
                        (desc
                          ? `<br><small class="education-desc">${desc.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</small>`
                          : ''
                        ) +
                    `</div>`;

                $('#added-education-container').append(tileHtml);

                const base = `Education[${educationIndex}]`;
                $('<input>').attr({type:'hidden', name: base + '.Institution', value: inst}).appendTo('#education-inputs');
                $('<input>').attr({type:'hidden', name: base + '.Degree',      value: deg }).appendTo('#education-inputs');
                $('<input>').attr({type:'hidden', name: base + '.StartDate',   value: start}).appendTo('#education-inputs');
                $('<input>').attr({type:'hidden', name: base + '.EndDate',     value: end }).appendTo('#education-inputs');
                $('<input>').attr({type:'hidden', name: base + '.IsOngoing',   value: ong }).appendTo('#education-inputs');
                $('<input>').attr({type:'hidden', name: base + '.Description', value: desc}).appendTo('#education-inputs');

                educationIndex++;
                $('[name="EntryEducation.Institution"], [name="EntryEducation.Degree"], [name="EntryEducation.StartDate"], [name="EntryEducation.EndDate"]').val('');
                $('[name="EntryEducation.IsOngoing"]').prop('checked', false);
                $('[name="EntryEducation.Description"]').val('');
            });
            $(document).on('click','.education-tile',function(){
                const idx = $(this).data('index');
                $(this).remove();
                $('#education-inputs input').filter(function(){
                    return this.name.indexOf(`Education[${idx}]`)===0;
                }).remove();
            });

            // ── WORK EXPERIENCE ─────────────────────────────────────────────────
            $('#add-work').on('click', function() {
                const prefix    = 'EntryWork',
                      comp      = $(`[name="${prefix}.Company"]`).val(),
                      pos       = $(`[name="${prefix}.Position"]`).val(),
                      startDate = $(`[name="${prefix}.StartDate"]`).val(),
                      endDate   = $(`[name="${prefix}.EndDate"]`).val(),
                      isOng     = $(`[name="${prefix}.IsOngoing"]`).is(':checked'),
                      resp      = $(`[name="${prefix}.Responsibilities"]`).val();

                if (!comp || !pos) { alert('Please enter both Company and Position.'); return; }

                let dates = startDate||'';
                if (isOng)       dates += ' – Present';
                else if (endDate) dates += ' – ' + endDate;

                const tileHtml =
                    `<div class="work-tile mb-2" data-index="${workIndex}">
                        <div class="work-content">
                          <strong>${comp}</strong> – ${pos}<br>
                          <small>${dates}</small>` +
                          (resp
                            ? `<br><small class="responsibilities">${resp.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</small>`
                            : ''
                          ) +
                        `</div>
                    </div>`;

                $('#added-work-container').append(tileHtml);

                const base = `Experience[${workIndex}]`;
                $('<input>').attr({type:'hidden', name: base+'.Company',           value: comp}).appendTo('#work-inputs');
                $('<input>').attr({type:'hidden', name: base+'.Position',          value: pos }).appendTo('#work-inputs');
                $('<input>').attr({type:'hidden', name: base+'.StartDate',         value: startDate}).appendTo('#work-inputs');
                $('<input>').attr({type:'hidden', name: base+'.EndDate',           value: endDate}).appendTo('#work-inputs');
                $('<input>').attr({type:'hidden', name: base+'.IsOngoing',         value: isOng}).appendTo('#work-inputs');
                $('<input>').attr({type:'hidden', name: base+'.Responsibilities',  value: resp}).appendTo('#work-inputs');

                workIndex++;
                $(`[name="${prefix}.Company"], [name="${prefix}.Position"], [name="${prefix}.StartDate"], [name="${prefix}.EndDate"]`).val('');
                $(`[name="${prefix}.IsOngoing"]`).prop('checked', false);
                $(`[name="${prefix}.Responsibilities"]`).val('');
            });
            $(document).on('click','.work-tile',function(){
                const idx = $(this).data('index');
                $(this).remove();
                $('#work-inputs input').filter(function(){
                    return this.name.startsWith(`Experience[${idx}]`);
                }).remove();
            });

            // ── SKILLS ───────────────────────────────────────────────────────────
            $('#add-skill').on('click', function() {
                const name = $('[name="EntrySkill.Name"]').val(),
                      lvl  = $('[name="EntrySkill.Level"]').val(),
                      desc = $('[name="EntrySkill.Description"]').val();
                if (!name) { alert('Please enter skill name.'); return; }

                const $tile = $(
                    `<div class="badge badge-light text-dark m-1 p-2" data-index="${skillIndex}">
                        ${name} <br>(Lvl ${lvl}/100)
                        ${desc ? `<div><small>${desc}</small></div>` : ''}
                    </div>`
                );
                $('#added-skills-container').append($tile);

                $('<input>').attr({type:'hidden', name:`Skills[${skillIndex}].Name`,       value: name}).appendTo('#skills-inputs');
                $('<input>').attr({type:'hidden', name:`Skills[${skillIndex}].Level`,      value: lvl }).appendTo('#skills-inputs');
                $('<input>').attr({type:'hidden', name:`Skills[${skillIndex}].Description`,value: desc}).appendTo('#skills-inputs');

                skillIndex++;
                $('[name="EntrySkill.Name"]').val('');
                $('[name="EntrySkill.Level"]').val('1');
                $('[name="EntrySkill.Description"]').val('');
            });
            $(document).on('click','#added-skills-container .badge',function(){
                const idx = $(this).data('index');
                $(this).remove();
                $('#skills-inputs input').filter(function(){
                    return this.name.indexOf(`Skills[${idx}]`)==0;
                }).remove();
            });

            // ── LANGUAGES ────────────────────────────────────────────────────────
            $('#add-language').on('click', function() {
                const prefix = 'EntryLanguage',
                      name   = $(`[name="${prefix}.Name"]`).val(),
                      lvl    = $(`[name="${prefix}.Level"]`).val();
                if (!name) { alert('Please enter a language name.'); return; }

                const $tile = $(
                    `<div class="language-tile badge badge-light text-dark m-1 p-2" data-index="${langIndex}">
                        ${name} <br>${lvl}
                    </div>`
                );
                $('#added-languages-container').append($tile);

                const base = `Languages[${langIndex}]`;
                $('<input>').attr({type:'hidden', name:base+'.Name',  value: name}).appendTo('#languages-inputs');
                $('<input>').attr({type:'hidden', name:base+'.Level', value: lvl }).appendTo('#languages-inputs');

                langIndex++;
                $(`[name="${prefix}.Name"]`).val('');
                $(`[name="${prefix}.Level"]`).val('A1');
            });
            $(document).on('click','.language-tile, .remove-language',function(){
                const $el = $(this).hasClass('language-tile') ? $(this) : $(this).closest('.language-item'),
                      idx = $el.data('index');
                $(`[data-index="${idx}"]`).remove();
                $('#languages-inputs input').filter(function(){
                    return this.name.indexOf(`Languages[${idx}]`)==0;
                }).remove();
            });

            // ── CUSTOM SECTION ──────────────────────────────────────────────────
            let fieldDefs   = [];  // CustomFieldDefinition[]
            let fieldValues = {};  // { id: value }

            function renderBuilderList(){
                $('#custom-field-list').empty();
                fieldDefs.forEach(f => {
                    $('#custom-field-list').append(
                        `<li class="list-group-item d-flex justify-content-between">
                            <strong>${f.Label}</strong> (${f.Type}${f.MaxLength?`; max ${f.MaxLength}`:""})
                            <button class="btn btn-sm btn-danger remove-field" data-id="${f.Id}">×</button>
                        </li>`
                    );
                });
                $('#Custom_FieldsJson').val(JSON.stringify(fieldDefs));
            }

            function renderFormFields(){
                const $container = $('#custom-form-fields').empty();
                fieldDefs.forEach(f => {
                    const $row = $('<div class="form-group"></div>');
                    $row.append(`<label for="${f.Id}">${f.Label}</label>`);
                    let $inp;
                    switch(f.Type){
                      case 'TextArea':
                        $inp = $(`<textarea id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"></textarea>`);
                        break;
                      case 'Number':
                        $inp = $(`<input type="number" id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"/>`);
                        break;
                      case 'Date':
                        $inp = $(`<input type="date"     id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"/>`);
                        break;
                      default:
                        $inp = $(`<input type="text"     id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"/>`);
                    }
                    if (f.MaxLength) $inp.attr('maxlength', f.MaxLength);
                    if (fieldValues[f.Id]) $inp.val(fieldValues[f.Id]);
                    $row.append($inp);
                    $container.append($row);
                });
                $('#Custom_ValuesJson').val(JSON.stringify(fieldValues));
            }

            $('#add-custom-field').on('click', function(){
                const type     = $('#new-field-type').val(),
                      label    = $('#new-field-label').val().trim(),
                      maxLen   = $('#new-field-maxlength').val();
                if (!label) { alert('You must enter a label'); return; }
                const id = `field-${fieldDefs.length}-${Date.now()}`;
                fieldDefs.push({ Id: id, Label: label, Type: type, MaxLength: maxLen?parseInt(maxLen):null });
                renderBuilderList();
                renderFormFields();
                $('#new-field-label, #new-field-maxlength').val('');
            });

            $(document).on('click','.remove-field', function(){
                const id = $(this).data('id');
                fieldDefs = fieldDefs.filter(f=>f.Id!==id);
                delete fieldValues[id];
                renderBuilderList();
                renderFormFields();
            });

            $('#custom-form-fields').on('input change','[name^="Custom.Values"]', function(){
                fieldValues[this.id] = $(this).val();
                $('#Custom_ValuesJson').val(JSON.stringify(fieldValues));
            });

            // ── SECTION TOGGLE (“Add Section”) ───────────────────────────────────
            $('.dropdown-item[data-section]').on('click', function(e){
                e.preventDefault();
                const sec      = $(this).data('section'),
                      $wrapper = $('#addSectionBtn').closest('.mb-4');
                $('#section-' + sec)
                  .removeClass('d-none')
                  .insertBefore($wrapper);
                $(this).addClass('disabled');
            });
        });
        </script>
}

