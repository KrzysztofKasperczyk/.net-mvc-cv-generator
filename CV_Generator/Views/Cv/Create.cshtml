@model CvGenerator.Models.CurriculumVitae
@using Microsoft.AspNetCore.Mvc.ViewFeatures

@{
    ViewData["Title"] = "Create CV";

    // Prepare ViewData for the entry partials
    var vdEntry = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntrySkill" } };
    var vdEntryWork = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntryWork" } };
    var vdEntryEducation = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntryEducation" } };
    var vdEntryLang = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "EntryLanguage" } };
    var vdEntryCustom = new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "Custom" } };
}

<h1>Create Your CV</h1>

<form asp-action="Create" method="post" enctype="multipart/form-data">
  <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

  <!-- Personal Information -->
  <div class="card mb-4 personal-item">
    <div class="card-header">Personal Information</div>
    <div class="card-body">
      <div class="row">
        <!-- Left Column -->
        <div class="col-12 col-md-6">
          <div class="form-group">
            <label asp-for="Personal.FullName"></label>
            <input asp-for="Personal.FullName" class="form-control w-50" maxlength="100" />
            <span asp-validation-for="Personal.FullName" class="text-danger"></span>
          </div>
          <div class="form-group">
            <label asp-for="Personal.Email"></label>
            <input asp-for="Personal.Email" class="form-control w-50" maxlength="100" />
            <span asp-validation-for="Personal.Email" class="text-danger"></span>
          </div>
          <div class="form-group">
            <label asp-for="Personal.CountryCode"></label>
            <select asp-for="Personal.CountryCode" class="form-control w-auto" asp-items="ViewBag.CountryCodes"></select>
            <span asp-validation-for="Personal.CountryCode" class="text-danger"></span>
          </div>
          <div class="form-group">
            <label asp-for="Personal.PhoneNumber"></label>
            <input asp-for="Personal.PhoneNumber" id="Personal_PhoneNumber" class="form-control w-auto" maxlength="11" />
            <span asp-validation-for="Personal.PhoneNumber" class="text-danger"></span>
          </div>
        </div>
        <!-- Right Column -->
        <div class="col-12 col-md-6">
          <div class="form-group">
            <label for="Photo" class="d-block">Photo</label>
            <input type="file" name="Photo" id="Photo" accept="image/*" class="form-control-file mt-1" />
          </div>
          <img id="photo-preview" src="" alt="Photo preview" class="cv-photo mt-2" style="display:none;" />
        </div>
      </div>
      <div class="form-group">
        <label asp-for="Personal.Summary"></label>
        <textarea asp-for="Personal.Summary" class="form-control" maxlength="500" rows="4" placeholder="Tell us something about yourself…"></textarea>
        <span asp-validation-for="Personal.Summary" class="text-danger"></span>
      </div>
    </div>
  </div>

  <!-- Add Section Dropdown -->
  <div class="mb-4">
    <div class="dropdown">
      <button class="btn btn-outline-primary dropdown-toggle"
              type="button"
              id="addSectionBtn"
              data-bs-toggle="dropdown"
              aria-expanded="false">
        Add Section
      </button>
      <ul class="dropdown-menu" aria-labelledby="addSectionBtn">
        <li><a class="dropdown-item" href="#" data-section="education">Education</a></li>
        <li><a class="dropdown-item" href="#" data-section="work">Work Experience</a></li>
        <li><a class="dropdown-item" href="#" data-section="skills">Skills</a></li>
        <li><a class="dropdown-item" href="#" data-section="languages">Languages</a></li>
        <li><a class="dropdown-item" href="#" data-section="custom">Custom</a></li>
      </ul>
    </div>
  </div>

  <!-- Education Section -->
  <div id="section-education" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Education</div>
      <div class="card-body">
        <div id="added-education-container" class="d-flex flex-column"></div>
      </div>
    </div>
    <div class="card mb-4">
      <div class="card-header">New Education</div>
      <div class="card-body">
        <partial name="_EducationItem"
                 model="new CvGenerator.Models.EducationItem()"
                 view-data="vdEntryEducation" />
      </div>
    </div>
    <div id="education-inputs"></div>
  </div>

  <!-- Work Experience Section -->
  <div id="section-work" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Experience</div>
      <div class="card-body">
        <div id="added-work-container" class="d-flex flex-column"></div>
      </div>
    </div>
    <div class="card mb-4">
      <div class="card-header">New Experience</div>
      <div class="card-body">
        <partial name="_WorkItem"
                 model="new CvGenerator.Models.WorkExperience()"
                 view-data="vdEntryWork" />
      </div>
    </div>
    <div id="work-inputs"></div>
  </div>

  <!-- Skills Section -->
  <div id="section-skills" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Skills</div>
      <div class="card-body">
        <div id="added-skills-container" class="d-flex flex-wrap"></div>
      </div>
    </div>
    <div class="card mb-4">
      <div class="card-header">New Skill</div>
      <div class="card-body">
        <partial name="_SkillItem"
                 model="new CvGenerator.Models.Skill()"
                 view-data="vdEntry" />
      </div>
    </div>
    <div id="skills-inputs"></div>
  </div>

  <!-- Languages Section -->
  <div id="section-languages" class="d-none">
    <div class="card mb-4">
      <div class="card-header">Added Languages</div>
      <div class="card-body">
        <div id="added-languages-container" class="d-flex flex-wrap"></div>
      </div>
    </div>
    <div class="card mb-4">
      <div class="card-header">New Language</div>
      <div class="card-body">
        <partial name="_LanguageItem"
                 model="new CvGenerator.Models.LanguageItem()"
                 view-data="vdEntryLang" />
        <button type="button" id="add-language" class="btn btn-sm btn-outline-primary mt-2">
          Add Language
        </button>
      </div>
    </div>
    <div id="languages-inputs"></div>
    <span asp-validation-for="Languages" class="text-danger"></span>
  </div>

  <!-- Custom Section -->
  <div id="section-custom" class="d-none">
    <partial name="_CustomSection"
             model="new CvGenerator.Models.CustomSection()"
             view-data="vdEntryCustom" />
  </div>

  <!-- Submit Button -->
  <div class="row mb-4">
    <div class="col-12 col-md-6">
      <button type="submit" class="btn btn-primary">Preview CV</button>
    </div>
  </div>
</form>

<!-- Hidden template for Skill clones -->
<div id="skill-template" style="display:none;">
  <script type="text/html">
    <partial
      name="_SkillItem"
      model="new CvGenerator.Models.Skill()"
      view-data="@(new ViewDataDictionary(ViewData) { TemplateInfo = { HtmlFieldPrefix = "Skills[__index__]" } })" />
  </script>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
      <script>
      $(function() {
        // ── Helper: YYYY-MM to MM-YYYY
        function formatYM(d) {
          var p = d.split('-');
          return p[1] + '-' + p[0];
        }

        // ── Counters
        var educationIndex = 0,
            workIndex      = 0,
            skillIndex     = 0,
            langIndex      = @Model.Languages.Count,
            customCount    = 0;

        // ── Personal Info handlers
        $('#Personal_PhoneNumber').on('input', function(){
          var v=this.value.replace(/\D/g,'').substring(0,9), m=v.match(/.{1,3}/g)||[];
          this.value = m.join('-');
        });
        $('#Photo').on('change', function(e){
          var f=e.target.files[0];
          if(!f||!f.type.startsWith('image/')){ alert('Please select an image file.'); return; }
          var r=new FileReader();
          r.onload = evt => $('#photo-preview').attr('src',evt.target.result).show();
          r.readAsDataURL(f);
        });

        // ── Autocomplete
        $('#institution-autocomplete').autocomplete({ source:'@Url.Action("SearchInstitutions", "Cv")', minLength:2 });
        $('#degree-autocomplete').autocomplete({ source:'@Url.Action("SearchDegrees", "Cv")',       minLength:2 });
        $('#EntryLanguage_Name').autocomplete({ source:'@Url.Action("SearchLanguages", "Cv")',     minLength:1 });

        // ── Date restrictions
        var today=new Date().toISOString().split('T')[0];
        $('input[type="date"][id$="StartDate"]').attr('max',today).on('change',function(){
          if(this.value>today) this.value=today;
        });
        $('input[type="date"]').on('change',function(){
          var n=$(this).attr('name');
          if(n.endsWith('.StartDate')){
            var end=n.replace('.StartDate','.EndDate'),
                $e=$('input[name="'+end+'"]');
            $e.attr('min',this.value);
            if($e.val()<this.value) $e.val(this.value);
          }
          if(n.endsWith('.EndDate')){
            var st=n.replace('.EndDate','.StartDate'),
                v=$('input[name="'+st+'"]').val();
            if(this.value<v) this.value=v;
          }
        });

        // ── Education
        $('#add-education').on('click', function(){
          var inst=$('[name="EntryEducation.Institution"]').val(),
              deg =$('[name="EntryEducation.Degree"]').val(),
              s   =$('[name="EntryEducation.StartDate"]').val(),
              e   =$('[name="EntryEducation.EndDate"]').val(),
              o   =$('[name="EntryEducation.IsOngoing"]').is(':checked'),
              dsc =$('[name="EntryEducation.Description"]').val();
          if(!inst||!deg){ alert('Please enter both Institution and Degree.'); return; }
          var dates = s?formatYM(s):'';
          if(o) dates+=' – Present'; else if(e) dates+=' – '+formatYM(e);
          var html =
            `<div class="education-tile mb-2 p-2 border rounded" data-index="${educationIndex}">
               <strong>${inst}</strong> ${deg}<br><small>${dates}</small>`+
            (dsc?`<br><small class="education-desc">${dsc.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</small>`:'')+
            `</div>`;
          $('#added-education-container').append(html);
          var base=`Education[${educationIndex}]`;
          $('<input>').attr({type:'hidden',name:base+'.Institution', value:inst}).appendTo('#education-inputs');
          $('<input>').attr({type:'hidden',name:base+'.Degree',      value:deg }).appendTo('#education-inputs');
          $('<input>').attr({type:'hidden',name:base+'.StartDate',   value:s   }).appendTo('#education-inputs');
          $('<input>').attr({type:'hidden',name:base+'.EndDate',     value:e   }).appendTo('#education-inputs');
          $('<input>').attr({type:'hidden',name:base+'.IsOngoing',   value:o   }).appendTo('#education-inputs');
          $('<input>').attr({type:'hidden',name:base+'.Description', value:dsc }).appendTo('#education-inputs');
          educationIndex++;
          $('[name="EntryEducation.Institution"],[name="EntryEducation.Degree"],[name="EntryEducation.StartDate"],[name="EntryEducation.EndDate"]').val('');
          $('[name="EntryEducation.IsOngoing"]').prop('checked',false);
          $('[name="EntryEducation.Description"]').val('');
        });
        $(document).on('click','.education-tile',function(){
          var i=$(this).data('index');
          $(this).remove();
          $('#education-inputs input').filter(function(){
            return this.name.indexOf(`Education[${i}]`)==0;
          }).remove();
        });

        // ── Work
        $('#add-work').on('click',function(){
          var pfx='EntryWork',
              co =$(`[name="${pfx}.Company"]`).val(),
              po =$(`[name="${pfx}.Position"]`).val(),
              sd =$(`[name="${pfx}.StartDate"]`).val(),
              ed =$(`[name="${pfx}.EndDate"]`).val(),
              og =$(`[name="${pfx}.IsOngoing"]`).is(':checked'),
              rs =$(`[name="${pfx}.Responsibilities"]`).val();
          if(!co||!po){ alert('Please enter both Company and Position.'); return; }
          var dates=sd||'';
          if(og) dates+=' – Present'; else if(ed) dates+=' – '+ed;
          var html=
            `<div class="work-tile mb-2" data-index="${workIndex}">
               <div class="work-content">
                 <strong>${co}</strong> – ${po}<br><small>${dates}</small>`+
            (rs?`<br><small class="responsibilities">${rs.replace(/</g,'&lt;').replace(/>/g,'&gt;')}</small>`:'')+
            `</div></div>`;
          $('#added-work-container').append(html);
          var b=`Experience[${workIndex}]`;
          $('<input>').attr({type:'hidden',name:b+'.Company',         value:co }).appendTo('#work-inputs');
          $('<input>').attr({type:'hidden',name:b+'.Position',        value:po }).appendTo('#work-inputs');
          $('<input>').attr({type:'hidden',name:b+'.StartDate',       value:sd }).appendTo('#work-inputs');
          $('<input>').attr({type:'hidden',name:b+'.EndDate',         value:ed }).appendTo('#work-inputs');
          $('<input>').attr({type:'hidden',name:b+'.IsOngoing',       value:og }).appendTo('#work-inputs');
          $('<input>').attr({type:'hidden',name:b+'.Responsibilities',value:rs }).appendTo('#work-inputs');
          workIndex++;
          $(`[name="${pfx}.Company"],[name="${pfx}.Position"],[name="${pfx}.StartDate"],[name="${pfx}.EndDate"]`).val('');
          $(`[name="${pfx}.IsOngoing"]`).prop('checked',false);
          $(`[name="${pfx}.Responsibilities"]`).val('');
        });
        $(document).on('click','.work-tile',function(){
          var i=$(this).data('index');
          $(this).remove();
          $('#work-inputs input').filter(function(){
            return this.name.startsWith(`Experience[${i}]`);
          }).remove();
        });

        // ── Skills
        $('#add-skill').on('click',function(){
          var nm=$('[name="EntrySkill.Name"]').val(),
              lv=$('[name="EntrySkill.Level"]').val(),
              ds=$('[name="EntrySkill.Description"]').val();
          if(!nm){ alert('Please enter skill name.'); return; }
          var $t=$(`
            <div class="badge badge-light text-dark m-1 p-2" data-index="${skillIndex}">
              ${nm}<br>(Lvl ${lv}/100)
              ${ds?`<div><small>${ds}</small></div>`:''}
            </div>
          `);
          $('#added-skills-container').append($t);
          $('<input>').attr({type:'hidden',name:`Skills[${skillIndex}].Name`,       value:nm }).appendTo('#skills-inputs');
          $('<input>').attr({type:'hidden',name:`Skills[${skillIndex}].Level`,      value:lv }).appendTo('#skills-inputs');
          $('<input>').attr({type:'hidden',name:`Skills[${skillIndex}].Description`,value:ds }).appendTo('#skills-inputs');
          skillIndex++;
          $('[name="EntrySkill.Name"],[name="EntrySkill.Level"],[name="EntrySkill.Description"]').val('');
        });
        $(document).on('click','#added-skills-container .badge',function(){
          var i=$(this).data('index');
          $(this).remove();
          $('#skills-inputs input').filter(function(){
            return this.name.indexOf(`Skills[${i}]`)==0;
          }).remove();
        });

        // ── Languages
        $('#add-language').on('click',function(){
          var p='EntryLanguage',
              nm=$(`[name="${p}.Name"]`).val(),
              lv=$(`[name="${p}.Level"]`).val();
          if(!nm){ alert('Please enter a language name.'); return; }
          var $t=$(`
            <div class="language-tile badge badge-light text-dark m-1 p-2" data-index="${langIndex}">
              ${nm}<br>${lv}
            </div>
          `);
          $('#added-languages-container').append($t);
          var b=`Languages[${langIndex}]`;
          $('<input>').attr({type:'hidden',name:b+'.Name',value:nm }).appendTo('#languages-inputs');
          $('<input>').attr({type:'hidden',name:b+'.Level',value:lv }).appendTo('#languages-inputs');
          langIndex++;
          $(`[name="${p}.Name"],[name="${p}.Level"]`).val('');
        });
        $(document).on('click','.language-tile, .remove-language',function(){
          var $e=$(this).hasClass('language-tile')?$(this):$(this).closest('.language-item'),
              i=$e.data('index');
          $(`[data-index="${i}"]`).remove();
          $('#languages-inputs input').filter(function(){
            return this.name.indexOf(`Languages[${i}]`)==0;
          }).remove();
        });

        // ── Custom Section (multiple)
        let fieldDefs=[],
            fieldValues={};
        function renderBuilderList(){
          $('#custom-field-list').empty();
          fieldDefs.forEach(f=>{
            $('#custom-field-list').append(`
              <li class="list-group-item d-flex justify-content-between">
                <strong>${f.Label}</strong> (${f.Type}${f.MaxLength?`; max ${f.MaxLength}`:""})
                <button class="btn btn-sm btn-danger remove-field" data-id="${f.Id}">×</button>
              </li>
            `);
          });
          $('#Custom_FieldsJson').val(JSON.stringify(fieldDefs));
        }
        function renderFormFields(){
          const $c=$('#custom-form-fields').empty();
          fieldDefs.forEach(f=>{
            const $r=$('<div class="form-group"></div>');
            $r.append(`<label for="${f.Id}">${f.Label}</label>`);
            let $i;
            switch(f.Type){
              case 'TextArea':
                $i=$(`<textarea id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"></textarea>`); break;
              case 'Number':
                $i=$(`<input type="number" id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"/>`); break;
              case 'Date':
                $i=$(`<input type="date" id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"/>`); break;
              default:
                $i=$(`<input type="text" id="${f.Id}" name="Custom.Values[${f.Id}]" class="form-control"/>`);
            }
            if(f.MaxLength) $i.attr('maxlength',f.MaxLength);
            if(fieldValues[f.Id]) $i.val(fieldValues[f.Id]);
            $r.append($i);
            $c.append($r);
          });
          $('#Custom_ValuesJson').val(JSON.stringify(fieldValues));
        }
        $('#add-custom-field').on('click',function(){
          const tp=$('#new-field-type').val(),
                lb=$('#new-field-label').val().trim(),
                ml=$('#new-field-maxlength').val();
          if(!lb){ alert('You must enter a label'); return; }
          const id=`field-${fieldDefs.length}-${Date.now()}`;
          fieldDefs.push({Id:id,Label:lb,Type:tp,MaxLength:ml?parseInt(ml):null});
          renderBuilderList(); renderFormFields();
          $('#new-field-label,#new-field-maxlength').val('');
        });
        $(document).on('click','.remove-field',function(){
          const id=$(this).data('id');
          fieldDefs=fieldDefs.filter(f=>f.Id!==id);
          delete fieldValues[id];
          renderBuilderList(); renderFormFields();
        });
        $('#custom-form-fields').on('input change','[name^="Custom.Values"]',function(){
          fieldValues[this.id]=$(this).val();
          $('#Custom_ValuesJson').val(JSON.stringify(fieldValues));
        });

        // ── Show section on Add Section click
        $('.dropdown-item[data-section]').on('click',function(e){
          e.preventDefault();
          var sec=$(this).data('section'),
              $w=$('#addSectionBtn').closest('.mb-4');
          $('#section-'+sec).removeClass('d-none').insertBefore($w);
          $(this).addClass('disabled');
        });
      });
      </script>
}
